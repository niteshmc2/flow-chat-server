'use strict';
//import sticky service.
const userService = require('../services/user-service'),
      bcrypt = require('bcrypt'),
      jwt = require('jsonwebtoken');
/**
 * Returns a list of stickies in JSON based on the
 * search parameters.
 *
 * @param {request} {HTTP request object}
 * @param {response} {HTTP response object}
 */

exports.list = function (request, response) {
    jwt.verify(request.token, 'icarus' , (err, data)=>{
        if(err) {
          console.log('unauthorized');
          response.status(403).send('Authorization failed')}
        else{
            userService.search({}, function (users) {
                response.status(200);
                response.json(users);
            },function(errMsg){
                response.status(400).send(errMsg);
            });
        }
    });
};

exports.search = function(request, response){
    jwt.verify(request.token, 'icarus' , (err, data)=>{
        if(err) {
          console.log('unauthorized');
          response.status(403).send('Authorization failed')}
        else{
            console.log(request.body.search);
            let query = new RegExp(request.body.search,"i")
            userService.search({'name': query}, function (users) {
                response.status(200);
                response.json(users);
            },function(errMsg){
                response.status(400).send(errMsg);
            });
        }
    });
}
/**
 * Creates a new sticky with the request JSON and
 * returns sticky JSON object.
 *
 * @param {request} {HTTP request object}
 * @param {response} {HTTP response object}
 */

exports.post = function (request, response) {
    request.body.password = bcrypt.hashSync(request.body.password,bcrypt.genSaltSync());
    let newUser = Object.assign({}, request.body);
    userService.save(newUser, function (user) {
        response.status(200);
        response.json(user);
    },function(errMsg){
        response.status(400).send(errMsg);
    });
};

/**
 * Returns a sticky object in JSON.
 *
 * @param {request} {HTTP request object}
 * @param {response} {HTTP response object}
 */
exports.get = function (req, res) {
    //console.log(request.params);
    jwt.verify(req.token, 'icarus' , (err, data)=>{
        if(err) {
          console.log('unauthorized');
          res.status(403).send('Authorization failed')}
        else{
          console.log("authorized");
          //res.status(200).json({data});
            userService.get(req.params.userId, function (user) {            // pass the username here - not the id generated by mongodb
                res.status(200).json(user);
          },function(errMsg){
            response.status(400).send(errMsg);
        });
        }
    });

    
};

/**
 * Updates and returns a sticky object in JSON.
 *
 * @param {request} {HTTP request object}
 * @param {response} {HTTP response object}
 */



exports.put = function (request, response) {
        
    jwt.verify(request.token, 'icarus' , (err, data)=>{
        if(err) {
          console.log('unauthorized');
          response.status(403).send('Authorization failed')}
        else{
            let user = Object.assign({}, request.body);
            user._id = request.params.userId;
            if(request.body.password){
                user.password = bcrypt.hashSync(request.body.password,bcrypt.genSaltSync());
                console.log("Update pwd request is: " + user.password);
            }
            userService.update(user, function (user) {
                response.json(user);
            }, function(errMsg){
                response.status(400).send(errMsg);
            }
        );
        }
    });
    
    
};

/**
 * Deletes a sticky object.
 *
 * @param {request} {HTTP request object}
 * @param {response} {HTTP response object}
 */
exports.delete = function (request, response) {
    jwt.verify(request.token, 'icarus' , (err, data)=>{
        if(err) {
          console.log('unauthorized');
          response.status(403).send('Authorization failed')}
        else{
            userService.delete(request.params.userId, function (user) {
                console.log("Id to delete is: "+ request.params.userId);
                response.json({
                    message: 'user Successfully deleted'
                });
            }, function(errMsg){
                response.status(400).send(errMsg);
            });
        }
    });
    
    
};

exports.login = function(req, res){
    console.log('user name is '+req.body.email);
    userService.get(req.body.email, function(result){
        if(result == null){
            res.status(400).json({error:"user not found"});
            return;
        }
          console.log(result);
          if(bcrypt.compareSync(req.body.password, result.password)){
              let thisguy = {email:result.email,messages:result.messages};
              let secret = 'icarus';
              let username = req.body.email;
              jwt.sign({thisguy},secret,(err,token) => {
                res.status(200).json({token,username});
              });
             // res.status(200).json(thisguy);
          }else{
            res.status(400).json({error:"incorrect password"});
          }
    });
}
